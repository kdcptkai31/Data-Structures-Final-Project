<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.14">
  <compounddef id="class_graph" kind="class" language="C++" prot="public">
    <compoundname>Graph</compoundname>
    <includes refid="graph_8h" local="no">graph.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_graph_1a09c1961830061f3fd068c0cad882d26c" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int Graph::totalNodes</definition>
        <argsstring></argsstring>
        <name>totalNodes</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/cptka/Dropbox/cs1d/CS1D-Project2/sourcecode/graph.h" line="100" column="1" bodyfile="C:/Users/cptka/Dropbox/cs1d/CS1D-Project2/sourcecode/graph.h" bodystart="100" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_graph_1a898001a5442c93daff26144162012d39" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int Graph::distance</definition>
        <argsstring></argsstring>
        <name>distance</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/cptka/Dropbox/cs1d/CS1D-Project2/sourcecode/graph.h" line="101" column="1" bodyfile="C:/Users/cptka/Dropbox/cs1d/CS1D-Project2/sourcecode/graph.h" bodystart="101" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_graph_1ade2424644e8136f25e3ddc7890483edc" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int Graph::MAX</definition>
        <argsstring></argsstring>
        <name>MAX</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/cptka/Dropbox/cs1d/CS1D-Project2/sourcecode/graph.h" line="102" column="1" bodyfile="C:/Users/cptka/Dropbox/cs1d/CS1D-Project2/sourcecode/graph.h" bodystart="102" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_graph_1a698447b92b71b8c698cade42d078d9b8" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int Graph::vertices[]</definition>
        <argsstring>[]</argsstring>
        <name>vertices</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/cptka/Dropbox/cs1d/CS1D-Project2/sourcecode/graph.h" line="103" column="1" bodyfile="C:/Users/cptka/Dropbox/cs1d/CS1D-Project2/sourcecode/graph.h" bodystart="103" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_graph_1a795f16fe846883c95efaa00d23753552" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int Graph::edgeVertices[]</definition>
        <argsstring>[]</argsstring>
        <name>edgeVertices</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/cptka/Dropbox/cs1d/CS1D-Project2/sourcecode/graph.h" line="104" column="1" bodyfile="C:/Users/cptka/Dropbox/cs1d/CS1D-Project2/sourcecode/graph.h" bodystart="104" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_graph_1ab14ba4d672ef30129845a40c665d523a" prot="private" static="no" mutable="no">
        <type>int **</type>
        <definition>int** Graph::matrix</definition>
        <argsstring></argsstring>
        <name>matrix</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/cptka/Dropbox/cs1d/CS1D-Project2/sourcecode/graph.h" line="105" column="1" bodyfile="C:/Users/cptka/Dropbox/cs1d/CS1D-Project2/sourcecode/graph.h" bodystart="105" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_graph_1a0a0d6e757963a3950d1dfe978a2d54ac" prot="private" static="no" mutable="no">
        <type>QVector&lt; QString &gt;</type>
        <definition>QVector&lt;QString&gt; Graph::visitedNodes</definition>
        <argsstring></argsstring>
        <name>visitedNodes</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/cptka/Dropbox/cs1d/CS1D-Project2/sourcecode/graph.h" line="106" column="1" bodyfile="C:/Users/cptka/Dropbox/cs1d/CS1D-Project2/sourcecode/graph.h" bodystart="106" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_graph_1af646f930ace7d1dfbf3c090064581e4c" prot="private" static="no" mutable="no">
        <type>QVector&lt; <ref refid="struct_node" kindref="compound">Node</ref> &gt;</type>
        <definition>QVector&lt;Node&gt; Graph::nodes</definition>
        <argsstring></argsstring>
        <name>nodes</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/cptka/Dropbox/cs1d/CS1D-Project2/sourcecode/graph.h" line="107" column="1" bodyfile="C:/Users/cptka/Dropbox/cs1d/CS1D-Project2/sourcecode/graph.h" bodystart="107" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_graph_1a625f46bd9a306720b497a1bd5106ffb8" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool Graph::visited[]</definition>
        <argsstring>[]</argsstring>
        <name>visited</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/cptka/Dropbox/cs1d/CS1D-Project2/sourcecode/graph.h" line="109" column="1" bodyfile="C:/Users/cptka/Dropbox/cs1d/CS1D-Project2/sourcecode/graph.h" bodystart="109" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_graph_1ae4c72b8ac4d693c49800a4c7e273654f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Graph::Graph</definition>
        <argsstring>()</argsstring>
        <name>Graph</name>
        <briefdescription>
<para><ref refid="class_graph_1ae4c72b8ac4d693c49800a4c7e273654f" kindref="member">Graph::Graph</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/cptka/Dropbox/cs1d/CS1D-Project2/sourcecode/graph.h" line="70" column="1" bodyfile="C:/Users/cptka/Dropbox/cs1d/CS1D-Project2/sourcecode/graph.cpp" bodystart="8" bodyend="18"/>
      </memberdef>
      <memberdef kind="function" id="class_graph_1a902c5b3eacb66d60752525ab23297a95" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Graph::~Graph</definition>
        <argsstring>()</argsstring>
        <name>~Graph</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/cptka/Dropbox/cs1d/CS1D-Project2/sourcecode/graph.h" line="71" column="1" bodyfile="C:/Users/cptka/Dropbox/cs1d/CS1D-Project2/sourcecode/graph.cpp" bodystart="20" bodyend="20"/>
      </memberdef>
      <memberdef kind="function" id="class_graph_1a6ad227abe45e368bf6a795f58434f859" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Graph::AddEdge</definition>
        <argsstring>(QString nodeFrom, QString nodeTo, int edgeWeight)</argsstring>
        <name>AddEdge</name>
        <param>
          <type>QString</type>
          <declname>nodeFrom</declname>
        </param>
        <param>
          <type>QString</type>
          <declname>nodeTo</declname>
        </param>
        <param>
          <type>int</type>
          <declname>edgeWeight</declname>
        </param>
        <briefdescription>
<para><ref refid="class_graph_1a6ad227abe45e368bf6a795f58434f859" kindref="member">Graph::AddEdge</ref>. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>nodeFrom</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nodeTo</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>edgeWeight</parametername>
</parameternamelist>
<parameterdescription>
<para>Simple member function to add a new edge </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/cptka/Dropbox/cs1d/CS1D-Project2/sourcecode/graph.h" line="74" column="1" bodyfile="C:/Users/cptka/Dropbox/cs1d/CS1D-Project2/sourcecode/graph.cpp" bodystart="49" bodyend="74"/>
        <references refid="class_graph_1a981460a9962c0cccada8459347a5fd5d" compoundref="graph_8cpp" startline="27" endline="40">isNode</references>
      </memberdef>
      <memberdef kind="function" id="class_graph_1a6fc3cb2886337e235a6f7a417e3d6c62" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Graph::AddNode</definition>
        <argsstring>(QString nodeName)</argsstring>
        <name>AddNode</name>
        <param>
          <type>QString</type>
          <declname>nodeName</declname>
        </param>
        <briefdescription>
<para><ref refid="class_graph_1a6fc3cb2886337e235a6f7a417e3d6c62" kindref="member">Graph::AddNode</ref>. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>nodeName</parametername>
</parameternamelist>
<parameterdescription>
<para>Adds a new node </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/cptka/Dropbox/cs1d/CS1D-Project2/sourcecode/graph.h" line="75" column="1" bodyfile="C:/Users/cptka/Dropbox/cs1d/CS1D-Project2/sourcecode/graph.cpp" bodystart="81" bodyend="90"/>
      </memberdef>
      <memberdef kind="function" id="class_graph_1a389281c21ce4288c795f303532d0379a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Graph::SetMatrix</definition>
        <argsstring>()</argsstring>
        <name>SetMatrix</name>
        <briefdescription>
<para><ref refid="class_graph_1a389281c21ce4288c795f303532d0379a" kindref="member">Graph::SetMatrix</ref> Sets the matrix with the given specifications. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/cptka/Dropbox/cs1d/CS1D-Project2/sourcecode/graph.h" line="76" column="1" bodyfile="C:/Users/cptka/Dropbox/cs1d/CS1D-Project2/sourcecode/graph.cpp" bodystart="139" bodyend="193"/>
        <references refid="class_graph_1a7f7b9f3d4992166ce4b52a1ea7d9c816" compoundref="graph_8cpp" startline="99" endline="123">GetVertex</references>
        <referencedby refid="class_main_window_1a8b244be8b7b7db1b08de2a2acb9409db" compoundref="mainwindow_8cpp" startline="11" endline="82">MainWindow::MainWindow</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_graph_1a9f99e0a20840bf8290195981904c9a5d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Graph::isConnected</definition>
        <argsstring>(QString nodeFrom, QString nodeTo)</argsstring>
        <name>isConnected</name>
        <param>
          <type>QString</type>
          <declname>nodeFrom</declname>
        </param>
        <param>
          <type>QString</type>
          <declname>nodeTo</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/cptka/Dropbox/cs1d/CS1D-Project2/sourcecode/graph.h" line="79" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_graph_1a981460a9962c0cccada8459347a5fd5d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Graph::isNode</definition>
        <argsstring>(QString nodeName)</argsstring>
        <name>isNode</name>
        <param>
          <type>QString</type>
          <declname>nodeName</declname>
          <defname>node</defname>
        </param>
        <briefdescription>
<para><ref refid="class_graph_1a981460a9962c0cccada8459347a5fd5d" kindref="member">Graph::isNode</ref>. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>node</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>boolean </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/cptka/Dropbox/cs1d/CS1D-Project2/sourcecode/graph.h" line="80" column="1" bodyfile="C:/Users/cptka/Dropbox/cs1d/CS1D-Project2/sourcecode/graph.cpp" bodystart="27" bodyend="40"/>
        <referencedby refid="class_graph_1a6ad227abe45e368bf6a795f58434f859" compoundref="graph_8cpp" startline="49" endline="74">AddEdge</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_graph_1a2f023d74e3da24e821a2dd1ffa410bb0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int Graph::GetWeight</definition>
        <argsstring>(QString nodeFrom, QString nodeTo)</argsstring>
        <name>GetWeight</name>
        <param>
          <type>QString</type>
          <declname>nodeFrom</declname>
        </param>
        <param>
          <type>QString</type>
          <declname>nodeTo</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/cptka/Dropbox/cs1d/CS1D-Project2/sourcecode/graph.h" line="81" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_graph_1a1848b068d8da7c3b1507bb5aa2630bc8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int Graph::GetDistance</definition>
        <argsstring>()</argsstring>
        <name>GetDistance</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/cptka/Dropbox/cs1d/CS1D-Project2/sourcecode/graph.h" line="82" column="1" bodyfile="C:/Users/cptka/Dropbox/cs1d/CS1D-Project2/sourcecode/graph.h" bodystart="82" bodyend="82"/>
      </memberdef>
      <memberdef kind="function" id="class_graph_1ae7f6e89dbf220a7d08067e691b46f37e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int Graph::GetTotalNodes</definition>
        <argsstring>()</argsstring>
        <name>GetTotalNodes</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/cptka/Dropbox/cs1d/CS1D-Project2/sourcecode/graph.h" line="83" column="1" bodyfile="C:/Users/cptka/Dropbox/cs1d/CS1D-Project2/sourcecode/graph.h" bodystart="83" bodyend="83"/>
      </memberdef>
      <memberdef kind="function" id="class_graph_1a7f7b9f3d4992166ce4b52a1ea7d9c816" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int Graph::GetVertex</definition>
        <argsstring>(QString nodeName)</argsstring>
        <name>GetVertex</name>
        <param>
          <type>QString</type>
          <declname>nodeName</declname>
        </param>
        <briefdescription>
<para><ref refid="class_graph_1a7f7b9f3d4992166ce4b52a1ea7d9c816" kindref="member">Graph::GetVertex</ref>. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>nodeName</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>vertex</para></simplesect>
Finds and returns the vertex associated with a nodeName </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/cptka/Dropbox/cs1d/CS1D-Project2/sourcecode/graph.h" line="84" column="1" bodyfile="C:/Users/cptka/Dropbox/cs1d/CS1D-Project2/sourcecode/graph.cpp" bodystart="99" bodyend="123"/>
        <referencedby refid="class_graph_1a389281c21ce4288c795f303532d0379a" compoundref="graph_8cpp" startline="139" endline="193">SetMatrix</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_graph_1a3102766a44bdc521d67dc1ac57c948b4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>QString</type>
        <definition>QString Graph::GetNodeName</definition>
        <argsstring>(int vertex)</argsstring>
        <name>GetNodeName</name>
        <param>
          <type>int</type>
          <declname>vertex</declname>
        </param>
        <briefdescription>
<para><ref refid="class_graph_1a3102766a44bdc521d67dc1ac57c948b4" kindref="member">Graph::GetNodeName</ref>. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>vertex</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>nodeName at vertext location </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/cptka/Dropbox/cs1d/CS1D-Project2/sourcecode/graph.h" line="85" column="1" bodyfile="C:/Users/cptka/Dropbox/cs1d/CS1D-Project2/sourcecode/graph.cpp" bodystart="130" bodyend="133"/>
        <referencedby refid="class_graph_1a3bb92a2d9cba33ba8e960eccb9c34f78" compoundref="graph_8cpp" startline="510" endline="521">PerformCompleteDijkstra</referencedby>
        <referencedby refid="class_main_window_1a8b244be8b7b7db1b08de2a2acb9409db" compoundref="mainwindow_8cpp" startline="11" endline="82">MainWindow::MainWindow</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_graph_1a4882a1652e182b65d8bc67585cbb1631" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int *</type>
        <definition>int* Graph::GetVertices</definition>
        <argsstring>()</argsstring>
        <name>GetVertices</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/cptka/Dropbox/cs1d/CS1D-Project2/sourcecode/graph.h" line="86" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_graph_1a99767655bcaea44c18b136363c521dfc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>QVector&lt; <ref refid="struct_node" kindref="compound">Node</ref> &gt;</type>
        <definition>QVector&lt;Node&gt; Graph::GetNodes</definition>
        <argsstring>()</argsstring>
        <name>GetNodes</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/cptka/Dropbox/cs1d/CS1D-Project2/sourcecode/graph.h" line="87" column="1" bodyfile="C:/Users/cptka/Dropbox/cs1d/CS1D-Project2/sourcecode/graph.h" bodystart="87" bodyend="87"/>
      </memberdef>
      <memberdef kind="function" id="class_graph_1a7bd3d4a366c25abc6ad74851e48fda8e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>QVector&lt; QString &gt;</type>
        <definition>QVector&lt;QString&gt; Graph::GetVisitedNodes</definition>
        <argsstring>()</argsstring>
        <name>GetVisitedNodes</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/cptka/Dropbox/cs1d/CS1D-Project2/sourcecode/graph.h" line="88" column="1" bodyfile="C:/Users/cptka/Dropbox/cs1d/CS1D-Project2/sourcecode/graph.h" bodystart="88" bodyend="88"/>
      </memberdef>
      <memberdef kind="function" id="class_graph_1aa13f9b10f1dd61da066dd59901598e56" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Graph::DFS</definition>
        <argsstring>(QString nodeName, QVector&lt; QString &gt; &amp;stadiums)</argsstring>
        <name>DFS</name>
        <param>
          <type>QString</type>
          <declname>nodeName</declname>
        </param>
        <param>
          <type>QVector&lt; QString &gt; &amp;</type>
          <declname>stadiums</declname>
        </param>
        <briefdescription>
<para><ref refid="class_graph_1aa13f9b10f1dd61da066dd59901598e56" kindref="member">Graph::DFS</ref>. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>nodeName</parametername>
</parameternamelist>
<parameterdescription>
<para>Simple DFS Graphing Function </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/cptka/Dropbox/cs1d/CS1D-Project2/sourcecode/graph.h" line="91" column="1" bodyfile="C:/Users/cptka/Dropbox/cs1d/CS1D-Project2/sourcecode/graph.cpp" bodystart="272" bodyend="282"/>
      </memberdef>
      <memberdef kind="function" id="class_graph_1a0e0f425a2a7a20151f1fcf537c32d7b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Graph::BFS</definition>
        <argsstring>(QString nodeName, QVector&lt; QString &gt; &amp;stadiums)</argsstring>
        <name>BFS</name>
        <param>
          <type>QString</type>
          <declname>nodeName</declname>
        </param>
        <param>
          <type>QVector&lt; QString &gt; &amp;</type>
          <declname>stadiums</declname>
        </param>
        <briefdescription>
<para><ref refid="class_graph_1a0e0f425a2a7a20151f1fcf537c32d7b5" kindref="member">Graph::BFS</ref>. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>nodeName</parametername>
</parameternamelist>
<parameterdescription>
<para>Implementation of the BFS graph function </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/cptka/Dropbox/cs1d/CS1D-Project2/sourcecode/graph.h" line="92" column="1" bodyfile="C:/Users/cptka/Dropbox/cs1d/CS1D-Project2/sourcecode/graph.cpp" bodystart="308" bodyend="352"/>
      </memberdef>
      <memberdef kind="function" id="class_graph_1ab4b197d26dfb1a53e14f3e5197053653" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int Graph::PrimMST</definition>
        <argsstring>()</argsstring>
        <name>PrimMST</name>
        <briefdescription>
<para><ref refid="class_graph_1ab4b197d26dfb1a53e14f3e5197053653" kindref="member">Graph::PrimMST</ref>. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>distance Returns the distance of the PrimMST </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/cptka/Dropbox/cs1d/CS1D-Project2/sourcecode/graph.h" line="93" column="1" bodyfile="C:/Users/cptka/Dropbox/cs1d/CS1D-Project2/sourcecode/graph.cpp" bodystart="383" bodyend="413"/>
      </memberdef>
      <memberdef kind="function" id="class_graph_1ac4e39e620f96920a506b0d8ce9ee17f1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>QVector&lt; int &gt;</type>
        <definition>QVector&lt; int &gt; Graph::Dijkstra</definition>
        <argsstring>(int sourceVertex, QVector&lt; QString &gt; &amp;stadiums)</argsstring>
        <name>Dijkstra</name>
        <param>
          <type>int</type>
          <declname>sourceVertex</declname>
        </param>
        <param>
          <type>QVector&lt; QString &gt; &amp;</type>
          <declname>stadiums</declname>
        </param>
        <briefdescription>
<para><ref refid="class_graph_1ac4e39e620f96920a506b0d8ce9ee17f1" kindref="member">Graph::Dijkstra</ref>. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sourceVertex</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>distances Out implementation of the Dijkstra&apos;s algorithm </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/cptka/Dropbox/cs1d/CS1D-Project2/sourcecode/graph.h" line="94" column="1" bodyfile="C:/Users/cptka/Dropbox/cs1d/CS1D-Project2/sourcecode/graph.cpp" bodystart="442" bodyend="465"/>
        <referencedby refid="class_graph_1a3b0a495ac7703b4b7f12dc8e6e490f3b" compoundref="graph_8cpp" startline="529" endline="533">PerformFromToDijkstra</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_graph_1a3bb92a2d9cba33ba8e960eccb9c34f78" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int Graph::PerformCompleteDijkstra</definition>
        <argsstring>(int sourceVertex, int baseCase, QVector&lt; QString &gt; &amp;stadiums)</argsstring>
        <name>PerformCompleteDijkstra</name>
        <param>
          <type>int</type>
          <declname>sourceVertex</declname>
        </param>
        <param>
          <type>int</type>
          <declname>baseCase</declname>
        </param>
        <param>
          <type>QVector&lt; QString &gt; &amp;</type>
          <declname>stadiums</declname>
        </param>
        <briefdescription>
<para><ref refid="class_graph_1a3bb92a2d9cba33ba8e960eccb9c34f78" kindref="member">Graph::PerformCompleteDijkstra</ref>. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sourceVertex</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>baseCase</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Disjkstra&apos;s algorithm on a segment of verticies </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/cptka/Dropbox/cs1d/CS1D-Project2/sourcecode/graph.h" line="95" column="1" bodyfile="C:/Users/cptka/Dropbox/cs1d/CS1D-Project2/sourcecode/graph.cpp" bodystart="510" bodyend="521"/>
        <references refid="class_graph_1a3102766a44bdc521d67dc1ac57c948b4" compoundref="graph_8cpp" startline="130" endline="133">GetNodeName</references>
      </memberdef>
      <memberdef kind="function" id="class_graph_1a3b0a495ac7703b4b7f12dc8e6e490f3b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int Graph::PerformFromToDijkstra</definition>
        <argsstring>(int fromVertex, int toVertex)</argsstring>
        <name>PerformFromToDijkstra</name>
        <param>
          <type>int</type>
          <declname>fromVertex</declname>
        </param>
        <param>
          <type>int</type>
          <declname>toVertex</declname>
        </param>
        <briefdescription>
<para><ref refid="class_graph_1a3b0a495ac7703b4b7f12dc8e6e490f3b" kindref="member">Graph::PerformFromToDijkstra</ref>. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fromVertex</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>toVertex</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Dijkstra&apos;s algorithm from a vertex to a vertex </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/cptka/Dropbox/cs1d/CS1D-Project2/sourcecode/graph.h" line="96" column="1" bodyfile="C:/Users/cptka/Dropbox/cs1d/CS1D-Project2/sourcecode/graph.cpp" bodystart="529" bodyend="533"/>
        <references refid="class_graph_1ac4e39e620f96920a506b0d8ce9ee17f1" compoundref="graph_8cpp" startline="442" endline="465">Dijkstra</references>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="class_graph_1abce1056e9896274a245ff5db672578a4" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>QVector&lt; <ref refid="struct_weight_edge" kindref="compound">WeightEdge</ref> &gt;</type>
        <definition>QVector&lt; WeightEdge &gt; Graph::sortedIncidentEdges</definition>
        <argsstring>(QString nodeName)</argsstring>
        <name>sortedIncidentEdges</name>
        <param>
          <type>QString</type>
          <declname>nodeName</declname>
        </param>
        <briefdescription>
<para>Graph::sortedIncidentEdges. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>nodeName</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>sortedEdges Sorts the edges on the graph </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/cptka/Dropbox/cs1d/CS1D-Project2/sourcecode/graph.h" line="108" column="1" bodyfile="C:/Users/cptka/Dropbox/cs1d/CS1D-Project2/sourcecode/graph.cpp" bodystart="201" bodyend="214"/>
      </memberdef>
      <memberdef kind="function" id="class_graph_1aeecb626c8f0ca49f8d39eb1aec8fc52a" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_node" kindref="compound">Node</ref></type>
        <definition>Node Graph::GetNodeFromName</definition>
        <argsstring>(QString nodeName)</argsstring>
        <name>GetNodeFromName</name>
        <param>
          <type>QString</type>
          <declname>nodeName</declname>
        </param>
        <briefdescription>
<para>Graph::GetNodeFromName. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>nodeName</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>nodeIT</para></simplesect>
Finds a node based on it&apos;s name </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/cptka/Dropbox/cs1d/CS1D-Project2/sourcecode/graph.h" line="112" column="1" bodyfile="C:/Users/cptka/Dropbox/cs1d/CS1D-Project2/sourcecode/graph.cpp" bodystart="252" bodyend="264"/>
      </memberdef>
      <memberdef kind="function" id="class_graph_1a8397a448ab5ce88921b8b5952a8550b4" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Graph::isVisited</definition>
        <argsstring>(QString nodeName)</argsstring>
        <name>isVisited</name>
        <param>
          <type>QString</type>
          <declname>nodeName</declname>
        </param>
        <briefdescription>
<para>Graph::isVisited. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>nodeName</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>boolean</para></simplesect>
Simple function to find out of if a node has been visited </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/cptka/Dropbox/cs1d/CS1D-Project2/sourcecode/graph.h" line="113" column="1" bodyfile="C:/Users/cptka/Dropbox/cs1d/CS1D-Project2/sourcecode/graph.cpp" bodystart="291" bodyend="300"/>
      </memberdef>
      <memberdef kind="function" id="class_graph_1a05e8b6d36ba3615481f3aa02e2faba14" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Graph::dfsUtil</definition>
        <argsstring>(Node node, QVector&lt; QString &gt; &amp;stadiums)</argsstring>
        <name>dfsUtil</name>
        <param>
          <type><ref refid="struct_node" kindref="compound">Node</ref></type>
          <declname>node</declname>
        </param>
        <param>
          <type>QVector&lt; QString &gt; &amp;</type>
          <declname>stadiums</declname>
        </param>
        <briefdescription>
<para>Graph::dfsUtil. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>node</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/cptka/Dropbox/cs1d/CS1D-Project2/sourcecode/graph.h" line="114" column="1" bodyfile="C:/Users/cptka/Dropbox/cs1d/CS1D-Project2/sourcecode/graph.cpp" bodystart="220" bodyend="243"/>
      </memberdef>
      <memberdef kind="function" id="class_graph_1a62a135c554e491dcef30cf98e380d54e" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int Graph::minKey</definition>
        <argsstring>(int key[], bool mstSet[])</argsstring>
        <name>minKey</name>
        <param>
          <type>int</type>
          <declname>key</declname>
          <array>[]</array>
        </param>
        <param>
          <type>bool</type>
          <declname>mstSet</declname>
          <array>[]</array>
        </param>
        <briefdescription>
<para>Graph::minKey. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mstSet</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>min_index</para></simplesect>
A utility function to find the vertex with minimum key value, from the set of vertices not yet included in MST </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/cptka/Dropbox/cs1d/CS1D-Project2/sourcecode/graph.h" line="115" column="1" bodyfile="C:/Users/cptka/Dropbox/cs1d/CS1D-Project2/sourcecode/graph.cpp" bodystart="363" bodyend="376"/>
      </memberdef>
      <memberdef kind="function" id="class_graph_1a9303d489fe7a8f8d797521c5939a54c9" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int Graph::minDistance</definition>
        <argsstring>(QVector&lt; int &gt; distances, bool sptSet[])</argsstring>
        <name>minDistance</name>
        <param>
          <type>QVector&lt; int &gt;</type>
          <declname>distances</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>sptSet</declname>
          <array>[]</array>
        </param>
        <briefdescription>
<para>Graph::minDistance. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>distances</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sptSet</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>min_index Returns the minimum distance between multiple points </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/cptka/Dropbox/cs1d/CS1D-Project2/sourcecode/graph.h" line="116" column="1" bodyfile="C:/Users/cptka/Dropbox/cs1d/CS1D-Project2/sourcecode/graph.cpp" bodystart="422" bodyend="434"/>
      </memberdef>
      <memberdef kind="function" id="class_graph_1a4ed2bb79a2b966f29f664c5b39195123" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Graph::DijkstraRecursive</definition>
        <argsstring>(int sourceVertex, int baseCase, QVector&lt; QString &gt; &amp;stadiums)</argsstring>
        <name>DijkstraRecursive</name>
        <param>
          <type>int</type>
          <declname>sourceVertex</declname>
        </param>
        <param>
          <type>int</type>
          <declname>baseCase</declname>
        </param>
        <param>
          <type>QVector&lt; QString &gt; &amp;</type>
          <declname>stadiums</declname>
        </param>
        <briefdescription>
<para>Graph::DijkstraRecursive. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sourceVertex</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>baseCase</parametername>
</parameternamelist>
<parameterdescription>
<para>A recursive implementation of the Dijkstra algorithm. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/cptka/Dropbox/cs1d/CS1D-Project2/sourcecode/graph.h" line="117" column="1" bodyfile="C:/Users/cptka/Dropbox/cs1d/CS1D-Project2/sourcecode/graph.cpp" bodystart="473" bodyend="502"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>The <ref refid="class_graph" kindref="compound">Graph</ref> class. </para>    </briefdescription>
    <detaileddescription>
<para>The graph class handles all of the functions and data related to the graphing function (finding shortest routes, most efficient, etc) for the NFL program </para>    </detaileddescription>
    <location file="C:/Users/cptka/Dropbox/cs1d/CS1D-Project2/sourcecode/graph.h" line="67" column="1" bodyfile="C:/Users/cptka/Dropbox/cs1d/CS1D-Project2/sourcecode/graph.h" bodystart="67" bodyend="118"/>
    <listofallmembers>
      <member refid="class_graph_1a6ad227abe45e368bf6a795f58434f859" prot="public" virt="non-virtual"><scope>Graph</scope><name>AddEdge</name></member>
      <member refid="class_graph_1a6fc3cb2886337e235a6f7a417e3d6c62" prot="public" virt="non-virtual"><scope>Graph</scope><name>AddNode</name></member>
      <member refid="class_graph_1a0e0f425a2a7a20151f1fcf537c32d7b5" prot="public" virt="non-virtual"><scope>Graph</scope><name>BFS</name></member>
      <member refid="class_graph_1aa13f9b10f1dd61da066dd59901598e56" prot="public" virt="non-virtual"><scope>Graph</scope><name>DFS</name></member>
      <member refid="class_graph_1a05e8b6d36ba3615481f3aa02e2faba14" prot="private" virt="non-virtual"><scope>Graph</scope><name>dfsUtil</name></member>
      <member refid="class_graph_1ac4e39e620f96920a506b0d8ce9ee17f1" prot="public" virt="non-virtual"><scope>Graph</scope><name>Dijkstra</name></member>
      <member refid="class_graph_1a4ed2bb79a2b966f29f664c5b39195123" prot="private" virt="non-virtual"><scope>Graph</scope><name>DijkstraRecursive</name></member>
      <member refid="class_graph_1a898001a5442c93daff26144162012d39" prot="private" virt="non-virtual"><scope>Graph</scope><name>distance</name></member>
      <member refid="class_graph_1a795f16fe846883c95efaa00d23753552" prot="private" virt="non-virtual"><scope>Graph</scope><name>edgeVertices</name></member>
      <member refid="class_graph_1a1848b068d8da7c3b1507bb5aa2630bc8" prot="public" virt="non-virtual"><scope>Graph</scope><name>GetDistance</name></member>
      <member refid="class_graph_1aeecb626c8f0ca49f8d39eb1aec8fc52a" prot="private" virt="non-virtual"><scope>Graph</scope><name>GetNodeFromName</name></member>
      <member refid="class_graph_1a3102766a44bdc521d67dc1ac57c948b4" prot="public" virt="non-virtual"><scope>Graph</scope><name>GetNodeName</name></member>
      <member refid="class_graph_1a99767655bcaea44c18b136363c521dfc" prot="public" virt="non-virtual"><scope>Graph</scope><name>GetNodes</name></member>
      <member refid="class_graph_1ae7f6e89dbf220a7d08067e691b46f37e" prot="public" virt="non-virtual"><scope>Graph</scope><name>GetTotalNodes</name></member>
      <member refid="class_graph_1a7f7b9f3d4992166ce4b52a1ea7d9c816" prot="public" virt="non-virtual"><scope>Graph</scope><name>GetVertex</name></member>
      <member refid="class_graph_1a4882a1652e182b65d8bc67585cbb1631" prot="public" virt="non-virtual"><scope>Graph</scope><name>GetVertices</name></member>
      <member refid="class_graph_1a7bd3d4a366c25abc6ad74851e48fda8e" prot="public" virt="non-virtual"><scope>Graph</scope><name>GetVisitedNodes</name></member>
      <member refid="class_graph_1a2f023d74e3da24e821a2dd1ffa410bb0" prot="public" virt="non-virtual"><scope>Graph</scope><name>GetWeight</name></member>
      <member refid="class_graph_1ae4c72b8ac4d693c49800a4c7e273654f" prot="public" virt="non-virtual"><scope>Graph</scope><name>Graph</name></member>
      <member refid="class_graph_1a9f99e0a20840bf8290195981904c9a5d" prot="public" virt="non-virtual"><scope>Graph</scope><name>isConnected</name></member>
      <member refid="class_graph_1a981460a9962c0cccada8459347a5fd5d" prot="public" virt="non-virtual"><scope>Graph</scope><name>isNode</name></member>
      <member refid="class_graph_1a8397a448ab5ce88921b8b5952a8550b4" prot="private" virt="non-virtual"><scope>Graph</scope><name>isVisited</name></member>
      <member refid="class_graph_1ab14ba4d672ef30129845a40c665d523a" prot="private" virt="non-virtual"><scope>Graph</scope><name>matrix</name></member>
      <member refid="class_graph_1ade2424644e8136f25e3ddc7890483edc" prot="private" virt="non-virtual"><scope>Graph</scope><name>MAX</name></member>
      <member refid="class_graph_1a9303d489fe7a8f8d797521c5939a54c9" prot="private" virt="non-virtual"><scope>Graph</scope><name>minDistance</name></member>
      <member refid="class_graph_1a62a135c554e491dcef30cf98e380d54e" prot="private" virt="non-virtual"><scope>Graph</scope><name>minKey</name></member>
      <member refid="class_graph_1af646f930ace7d1dfbf3c090064581e4c" prot="private" virt="non-virtual"><scope>Graph</scope><name>nodes</name></member>
      <member refid="class_graph_1a3bb92a2d9cba33ba8e960eccb9c34f78" prot="public" virt="non-virtual"><scope>Graph</scope><name>PerformCompleteDijkstra</name></member>
      <member refid="class_graph_1a3b0a495ac7703b4b7f12dc8e6e490f3b" prot="public" virt="non-virtual"><scope>Graph</scope><name>PerformFromToDijkstra</name></member>
      <member refid="class_graph_1ab4b197d26dfb1a53e14f3e5197053653" prot="public" virt="non-virtual"><scope>Graph</scope><name>PrimMST</name></member>
      <member refid="class_graph_1a389281c21ce4288c795f303532d0379a" prot="public" virt="non-virtual"><scope>Graph</scope><name>SetMatrix</name></member>
      <member refid="class_graph_1abce1056e9896274a245ff5db672578a4" prot="private" virt="non-virtual"><scope>Graph</scope><name>sortedIncidentEdges</name></member>
      <member refid="class_graph_1a09c1961830061f3fd068c0cad882d26c" prot="private" virt="non-virtual"><scope>Graph</scope><name>totalNodes</name></member>
      <member refid="class_graph_1a698447b92b71b8c698cade42d078d9b8" prot="private" virt="non-virtual"><scope>Graph</scope><name>vertices</name></member>
      <member refid="class_graph_1a625f46bd9a306720b497a1bd5106ffb8" prot="private" virt="non-virtual"><scope>Graph</scope><name>visited</name></member>
      <member refid="class_graph_1a0a0d6e757963a3950d1dfe978a2d54ac" prot="private" virt="non-virtual"><scope>Graph</scope><name>visitedNodes</name></member>
      <member refid="class_graph_1a902c5b3eacb66d60752525ab23297a95" prot="public" virt="non-virtual"><scope>Graph</scope><name>~Graph</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
